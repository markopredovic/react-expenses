{"version":3,"sources":["context/ExpensesContext.js","reducers/expensesReducer.js","types.js","hooks/useExpenses.js","components/Header/index.js","components/Header/Header.js","components/Footer/index.js","components/Footer/Footer.js","components/FilterExpenses/index.js","components/FilterExpenses/FilterExpenses.js","helpers/Utility.js","components/ExpensesList/Expense/Expense.js","components/ListHeader/index.js","components/ListHeader/ListHeader.js","components/ExpensesList/index.js","components/ExpensesList/ExpensesList.js","selectors/expenses.js","components/AddExpenseForm/AddExpenseForm.js","components/AddExpenseForm/index.js","api/expenses.js","App.js","serviceWorker.js","index.js"],"names":["expensesContext","createContext","expenses","list","add","initialState","month","year","Date","getFullYear","lang","getFullList","state","action","payload","addExpense","expense","filterExpenses","filter","removeExpense","id","updatedExpenses","expensesReducer","type","useExpenses","api","useReducer","dispatch","useEffect","getList","e","remove","changeLang","Header","strings","LocalizedStrings","en","expenseList","rs","context","useContext","ExpenseContext","setLanguage","currentLang","getLanguage","to","exact","activeClassName","className","onClick","code","svg","Footer","ExpensesContext","FilterExpenses","selectDate","all","may","submit","selectMonthRef","useRef","selectYearRef","current","value","onSubmit","preventDefault","parseInt","name","onChange","ref","style","marginRight","getLocalStorage","key","localStorageItemJson","window","localStorage","getItem","JSON","parse","setLocalStorage","valueString","stringify","setItem","expenseCompare","a","b","date","getMonthName","locale","month_name","Expense","toLocaleDateString","price","toFixed","ListHeader","expensesAllTime","expensesWholeYear","expensesMonthForAllYears","expensesForMonthYear","result","formatString","makeHeader","ExpensesList","total","filteredList","filters","sort","_month","getMonth","_year","getFilteredList","map","index","reduce","acc","registerLocale","AddExpenseForm","addExpenseName","addExpenseValue","emptyName","emptyPrice","expenseAdded","useState","errors","setErrors","expenseInputPriceRef","expenseInputNameRef","setDate","createExpense","Math","round","random","validateExpense","Object","keys","length","newExpense","ToastsStore","success","placeholder","selected","dateFormat","store","position","ToastsContainerPosition","TOP_RIGHT","App","Provider","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eefd3829.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nconst expensesContext = createContext({\n  expenses: [],\n  list: () => {},\n  add: () => {}\n})\n\nexport default expensesContext\n\n","import {\n  LIST_ALL_EXPENSES,\n  ADD_EXPENSE,\n  FILTER_EXPENSES,\n  REMOVE_EXPENSE,\n  CHANGE_LANG\n} from \"../types\";\n\nconst initialState = {\n  expenses: [],\n  month: -1,\n  year: new Date().getFullYear(),\n  lang: \"rs\"\n};\n\nconst expensesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LIST_ALL_EXPENSES:\n      return getFullList(state, action);\n    case ADD_EXPENSE:\n      return addExpense(state, action.payload);\n    case FILTER_EXPENSES:\n      return filterExpenses(state, action.payload);\n    case REMOVE_EXPENSE:\n      return removeExpense(state, action.payload);\n    case CHANGE_LANG:\n      return {\n        ...state,\n        lang: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst getFullList = (state, action) => {\n  return {\n    ...state,\n    expenses: [...state.expenses, ...action.payload],\n    month: -1,\n    year: new Date().getFullYear()\n  };\n};\n\nconst addExpense = (state, expense) => {\n  return {\n    ...state,\n    expenses: [...state.expenses, expense]\n  };\n};\n\nconst filterExpenses = (state, payload) => {\n  return {\n    ...state,\n    month: payload.filter.month,\n    year: payload.filter.year\n  };\n};\n\nconst removeExpense = (state, id) => {\n  let updatedExpenses = state.expenses.filter(expense => expense.id !== id);\n\n  return {\n    ...state,\n    expenses: updatedExpenses\n  };\n};\n\nexport default expensesReducer;\n","export const LIST_ALL_EXPENSES = 'LIST_ALL_EXPENSES'\nexport const ADD_EXPENSE = \"ADD_EXPENSE\";\nexport const FILTER_EXPENSES = \"FILTER_EXPENSES\";\nexport const REMOVE_EXPENSE = \"REMOVE_EXPENSE\";\nexport const CHANGE_LANG = \"CHANGE_LANG\";","import { useReducer, useEffect } from \"react\";\nimport expensesReducer from \"../reducers/expensesReducer\";\nimport {\n  LIST_ALL_EXPENSES,\n  ADD_EXPENSE,\n  FILTER_EXPENSES,\n  REMOVE_EXPENSE,\n  CHANGE_LANG\n} from \"../types\";\n\nconst useExpenses = api => {\n  // useReducer\n\n  const [state, dispatch] = useReducer(expensesReducer);\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = () => {\n    const expenses = api.getList();\n\n    if (expenses) {\n      dispatch({ type: LIST_ALL_EXPENSES, payload: expenses });\n    }\n  };\n\n  const add = expense => {\n    try {\n      api.add(expense);\n    } catch (e) {}\n\n    dispatch({ type: ADD_EXPENSE, payload: expense });\n  };\n\n  const filter = filter => {\n    dispatch({ type: FILTER_EXPENSES, payload: { filter } });\n  };\n\n  const remove = id => {\n    api.remove(id);\n    dispatch({ type: REMOVE_EXPENSE, payload: id });\n  };\n\n  const changeLang = lang => {\n    dispatch({ type: CHANGE_LANG, payload: lang });\n  };\n\n  return {\n    state,\n    add,\n    filter,\n    remove,\n    changeLang\n  };\n};\n\nexport default useExpenses;\n","import Header from './Header'\n\nexport default Header","import React, { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ExpenseContext from \"../../context/ExpensesContext\";\nimport LocalizedStrings from \"react-localization\";\nimport ReactCountryFlag from \"react-country-flag\";\n\nconst Header = () => {\n  let strings = new LocalizedStrings({\n    en: {\n      expenseList: \"Expense List\",\n      addExpense: \"Add Expense\"\n    },\n    rs: {\n      expenseList: \"Lista troskova\",\n      addExpense: \"Dodaj troskove\"\n    }\n  });\n\n  const context = useContext(ExpenseContext);\n\n  if (context.state) {\n    strings.setLanguage(context.state.lang);\n  }\n\n  const currentLang = strings.getLanguage();\n\n  return (\n    <header>\n      <nav>\n        <ul>\n          <li>\n            <NavLink\n              to=\"/react-expenses\"\n              exact\n              activeClassName=\"is-active-link\"\n            >\n              {strings.expenseList}\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/react-expenses/add-expense\"\n              exact\n              activeClassName=\"is-active-link\"\n            >\n              {strings.addExpense}\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n      <div className=\"l-lang\">\n        <ul>\n          {currentLang === \"en\" && (\n            <li>\n              <span\n                onClick={() => context.changeLang(\"rs\")}\n                className={currentLang === \"rs\" ? \"active-lang\" : \"\"}\n              >\n                <ReactCountryFlag code=\"rs\" svg />\n              </span>\n            </li>\n          )}\n          {currentLang === \"rs\" && (\n            <li>\n              <span\n                onClick={() => context.changeLang(\"en\")}\n                className={currentLang === \"en\" ? \"active-lang\" : \"\"}\n              >\n                <ReactCountryFlag code=\"us\" svg />\n              </span>\n            </li>\n          )}\n        </ul>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import Footer from \"./Footer\";\n\nexport default Footer;\n","import React, { useContext } from \"react\";\nimport ExpensesContext from \"../../context/ExpensesContext\";\n\nconst Footer = () => {\n  const context = useContext(ExpensesContext);\n\n  return (\n    <footer>\n      <div className=\"l-content\">@markoni-dev</div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import FilterExpenses from './FilterExpenses'\n\nexport default FilterExpenses","import React, { useEffect, useRef, useContext } from \"react\";\nimport ExpensesContext from \"../../context/ExpensesContext\";\nimport LocalizedStrings from \"react-localization\";\n\nconst FilterExpenses = () => {\n  let strings = new LocalizedStrings({\n    en: {\n      selectDate: \"Select date filter:\",\n      month: \"month\",\n      year: \"year\",\n      all: \"All\",\n      may: \"May\",\n      submit: \"submit\"\n    },\n    rs: {\n      selectDate: \"Filtriraj troskove po datumu:\",\n      month: \"mesec\",\n      year: \"godina\",\n      all: \"Sve\",\n      may: \"Maj\",\n      submit: \"primeni\"\n    }\n  });\n\n  const context = useContext(ExpensesContext);\n\n  const selectMonthRef = useRef(null);\n  const selectYearRef = useRef(null);\n\n  if (context.state) {\n    strings.setLanguage(context.state.lang);\n  }\n\n  useEffect(() => {\n    selectMonthRef.current.value = context.state ? context.state.month : -1;\n    selectYearRef.current.value = context.state ? context.state.year : -1;\n  }, [context.state]);\n\n  const onChangeMonth = e => {};\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n\n    const shouldDoFilter =\n      selectMonthRef.current.value !== -1 || selectYearRef.current.value !== -1;\n\n    if (shouldDoFilter) {\n      context.filter({\n        month: parseInt(selectMonthRef.current.value),\n        year: parseInt(selectYearRef.current.value)\n      });\n    }\n  };\n\n  return (\n    <>\n      <form className=\"l-filter\" onSubmit={onSubmitHandler}>\n        <span>{strings.selectDate}</span>\n        <div className=\"l-fields\">\n          <div className=\"l-select\">\n            <span>{strings.month}:</span>\n            <select\n              name=\"expenses-month\"\n              onChange={onChangeMonth}\n              ref={selectMonthRef}\n              style={{ marginRight: \"20px\" }}\n            >\n              <option value=\"-1\">{strings.all}</option>\n              <option value=\"0\">Jan</option>\n              <option value=\"1\">Feb</option>\n              <option value=\"2\">Mar</option>\n              <option value=\"3\">Apr</option>\n              <option value=\"4\">{strings.may}</option>\n              <option value=\"5\">Jun</option>\n              <option value=\"6\">Jul</option>\n              <option value=\"7\">Avg</option>\n              <option value=\"8\">Sep</option>\n              <option value=\"9\">Okt</option>\n              <option value=\"10\">Nov</option>\n              <option value=\"11\">Dec</option>\n            </select>\n          </div>\n          <div className=\"l-select\">\n            <span>{strings.year}:</span>\n            <select name=\"expenses-year\" ref={selectYearRef}>\n              <option value=\"-1\">{strings.all}</option>\n              <option value=\"2019\">2019</option>\n              <option value=\"2020\">2020</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"l-action\">\n          <button type=\"submit\">{strings.submit}</button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default FilterExpenses;\n","export const getLocalStorage = key => {\n  let localStorageItemJson = null;\n\n  try {\n    localStorageItemJson = window.localStorage.getItem(key);\n  } catch (e) {\n    return null;\n  }\n  const localStorageItem = JSON.parse(localStorageItemJson);\n\n  return localStorageItem;\n};\n\nexport const setLocalStorage = (key, value) => {\n  const valueString = JSON.stringify(value);\n\n  window.localStorage.setItem(key, valueString);\n};\n\nexport const expenseCompare = (a, b) => {\n  return new Date(a.date) > new Date(b.date) ? -1 : 1;\n};\n\nexport const getLocaleDate = date => {\n  let localeDate = new Date(date);\n\n  return localeDate.toLocaleDateString(\"sr-SR\");\n};\n\nexport const getMonthName = (locale, month) => {\n  let month_name = null;\n  const months_en = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n  ];\n\n  const months_rs = [\n    \"Januar\",\n    \"Februar\",\n    \"Mart\",\n    \"April\",\n    \"Maj\",\n    \"Jun\",\n    \"Jul\",\n    \"Avgust\",\n    \"Septembar\",\n    \"Oktobar\",\n    \"Novembar\",\n    \"Decembar\"\n  ];\n\n  if (locale === \"en\") {\n    month_name = months_en[month];\n  }\n  if (locale === \"rs\") {\n    month_name = months_rs[month];\n  }\n\n  return month_name;\n};\n","import React, { useContext } from \"react\";\nimport { getLocaleDate } from \"../../../helpers/Utility\";\nimport ExpensesContext from \"../../../context/ExpensesContext\";\nimport { FaTimes } from \"react-icons/fa\";\n\nconst Expense = ({ expense }) => {\n  const context = useContext(ExpensesContext);\n\n  return (\n    <li>\n      <span className=\"expense-date\">{getLocaleDate(expense.date)}</span>\n      <span className=\"expense-price\">{expense.price.toFixed(2)}</span>\n      <span className=\"expense-name\">{expense.name}</span>\n      <span\n        className=\"expense-delete\"\n        onClick={() => context.remove(expense.id)}\n      >\n        <FaTimes />\n      </span>\n    </li>\n  );\n};\n\nexport default Expense;\n","import ListHeader from \"./ListHeader\";\n\nexport default ListHeader;\n","import React, { useContext, useEffect } from \"react\";\nimport ExpensesContext from \"../../context/ExpensesContext\";\nimport LocalizedStrings from \"react-localization\";\nimport { getMonthName } from \"../../helpers/Utility\";\n\nconst ListHeader = () => {\n  let strings = new LocalizedStrings({\n    en: {\n      expensesAllTime: \"All time expenses\",\n      expensesWholeYear: \"Expenses for whole {0} year\",\n      expensesMonthForAllYears: \"Expenses for {0} month for all years\",\n      expensesForMonthYear: \"Expenses for {0} month for {1} year\"\n    },\n    rs: {\n      expensesAllTime: \"Troskovi za celokupan period\",\n      expensesWholeYear: \"Troskovi za celu {0} godinu\",\n      expensesMonthForAllYears: \"Troskovi za {0} mesec za sve godine\",\n      expensesForMonthYear: \"Troskovi za {0} mesec za {1} godinu\"\n    }\n  });\n\n  const context = useContext(ExpensesContext);\n\n  const makeHeader = (month, year) => {\n    let result = null;\n\n    if (month === null && year === null) {\n      return null;\n    }\n    if (month === -1 && year === -1) {\n      result = strings.expensesAllTime;\n    }\n    if (month === -1 && year !== -1) {\n      result = strings.formatString(\n        strings.expensesWholeYear,\n        <span className=\"m-bold m-beige\">{year}</span>\n      );\n    }\n    if (month !== -1 && year === -1) {\n      result = strings.formatString(\n        strings.expensesMonthForAllYears,\n        <span className=\"m-bold m-beige\">\n          {getMonthName(context.state.lang, month)}\n        </span>\n      );\n    }\n    if (month !== -1 && year !== -1) {\n      result = strings.formatString(\n        strings.expensesForMonthYear,\n        <span className=\"m-bold m-beige\">\n          {getMonthName(context.state && context.state.lang, month)}\n        </span>,\n        <span className=\"m-bold m-beige\">{year}</span>\n      );\n    }\n\n    return result;\n  };\n\n  if (context.state) {\n    strings.setLanguage(context.state.lang);\n  }\n\n  return (\n    <div className=\"l-expenses-header\">\n      {makeHeader(\n        context.state && context.state.month,\n        context.state && context.state.year\n      )}\n    </div>\n  );\n};\n\nexport default ListHeader;\n","import ExpensesList from './ExpensesList'\n\nexport default ExpensesList","import React, { useContext } from \"react\";\nimport ExpensesContext from \"../../context/ExpensesContext\";\nimport FilterExpenses from \"../FilterExpenses\";\nimport Expense from \"./Expense/Expense\";\nimport ListHeader from \"../ListHeader\";\nimport { getTotal, getFilteredList } from \"../../selectors/expenses\";\nimport LocalizedStrings from \"react-localization\";\n\nconst ExpensesList = () => {\n  let strings = new LocalizedStrings({\n    en: {\n      total: \"Total\"\n    },\n    rs: {\n      total: \"Ukupno\"\n    }\n  });\n\n  const context = useContext(ExpensesContext);\n\n  if (context.state) {\n    strings.setLanguage(context.state.lang);\n  }\n\n  const filteredList = context.state\n    ? getFilteredList(context.state.expenses, {\n        month: context.state.month,\n        year: context.state.year\n      })\n    : [];\n\n  return (\n    <main>\n      {context.state && <FilterExpenses />}\n      {context.state && <ListHeader />}\n      <ul className=\"l-expenses-list\">\n        {context.state\n          ? filteredList.map((expense, index) => (\n              <Expense key={index} expense={expense} />\n            ))\n          : \"Loading ...\"}\n      </ul>\n      <div className=\"l-total\">\n        {strings.total}:{\" \"}\n        <span className=\"m-bold m-beige\">\n          {getTotal(filteredList).toFixed(2)}\n        </span>\n      </div>\n    </main>\n  );\n};\n\nexport default ExpensesList;\n","import { expenseCompare } from \"../helpers/Utility\";\n\nexport const getTotal = expenses => {\n  return expenses.reduce((acc, expense) => acc + expense.price, 0);\n};\n\nexport const getFilteredList = (expenses, filters) => {\n  const { month, year } = filters;\n\n  if (month === -1 && year === -1) {\n    return expenses.sort(expenseCompare);\n  } else {\n    return expenses\n      .filter(expense => {\n        const _month = new Date(expense.date).getMonth();\n        const _year = new Date(expense.date).getFullYear();\n\n        if (month === -1) {\n          return year === _year;\n        } else if (year === -1) {\n          return month === _month;\n        } else {\n          return month === _month && year === _year;\n        }\n      })\n      .sort(expenseCompare);\n  }\n};\n","import React, { useRef, useContext, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport ExpenseContext from \"../../context/ExpensesContext\";\nimport LocalizedStrings from \"react-localization\";\nimport { registerLocale } from \"react-datepicker\";\nimport rs from \"date-fns/locale/sr-Latn\";\nimport {\n  ToastsContainer,\n  ToastsStore,\n  ToastsContainerPosition\n} from \"react-toasts\";\nregisterLocale(\"rs\", rs);\n\n// TODO: add toast messages\n\nconst AddExpenseForm = () => {\n  let strings = new LocalizedStrings({\n    en: {\n      addExpenseName: \"add expense name\",\n      addExpenseValue: \"add expense value\",\n      submit: \"add\",\n      emptyName: \"empty expense name\",\n      emptyPrice: \"empty expense value\",\n      selectDate: \"Date:\",\n      expenseAdded: \"Expense added to list\"\n    },\n    rs: {\n      addExpenseName: \"naziv utroska\",\n      addExpenseValue: \"potrosena vrednost\",\n      submit: \"dodaj\",\n      emptyName: \"prazan naziv utroska\",\n      emptyPrice: \"prazna vrednost utroska\",\n      selectDate: \"Datum:\",\n      expenseAdded: \"Utrosak dodat u listu\"\n    }\n  });\n\n  const [errors, setErrors] = useState(null);\n\n  const context = useContext(ExpenseContext);\n\n  if (context.state) {\n    strings.setLanguage(context.state.lang);\n  }\n\n  const currentLang = strings.getLanguage();\n\n  const expenseInputPriceRef = useRef(null);\n  const expenseInputNameRef = useRef(null);\n\n  const [date, setDate] = useState(new Date());\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n\n    const errors = validateExpense();\n\n    if (Object.keys(errors).length === 0) {\n      const newExpense = createExpense();\n      context.add(newExpense);\n      ToastsStore.success(strings.expenseAdded);\n\n      expenseInputNameRef.current.value = \"\";\n      expenseInputPriceRef.current.value = \"\";\n    }\n  };\n\n  const createExpense = () => {\n    const expense = {};\n\n    expense.id = Math.round(Math.random() * 1000000);\n    expense.name = expenseInputNameRef.current.value;\n    expense.price = parseInt(expenseInputPriceRef.current.value);\n    expense.date = date;\n\n    return expense;\n  };\n\n  const validateExpense = () => {\n    let errors = {};\n\n    if (expenseInputNameRef.current.value === \"\")\n      errors.emptyName = strings.emptyName;\n    if (expenseInputPriceRef.current.value === \"\")\n      errors.emptyPrice = strings.emptyPrice;\n\n    setErrors(errors);\n\n    return errors;\n  };\n\n  const handleChange = date => {\n    setDate(date);\n  };\n\n  return (\n    <main>\n      <div className=\"l-add-expense-form\">\n        <form onSubmit={onSubmitHandler}>\n          <div className=\"l-fields\">\n            <div className=\"l-field\">\n              <input\n                type=\"text\"\n                name=\"expense\"\n                ref={expenseInputNameRef}\n                placeholder={strings.addExpenseName}\n              />\n              {errors && (\n                <span className=\"m-inline-error\">{errors.emptyName}</span>\n              )}\n            </div>\n            <div className=\"l-field\">\n              <input\n                type=\"text\"\n                name=\"expense\"\n                ref={expenseInputPriceRef}\n                placeholder={strings.addExpenseValue}\n              />\n              {errors && (\n                <span className=\"m-inline-error\">{errors.emptyPrice}</span>\n              )}\n            </div>\n          </div>\n          <div className=\"l-fields\">\n            <span style={{ marginRight: \"10px\" }}>{strings.selectDate}</span>\n            <DatePicker\n              locale={currentLang === \"en\" ? \"en\" : \"rs\"}\n              selected={date}\n              onChange={handleChange}\n              dateFormat=\"MMMM d, yyyy\"\n            />\n          </div>\n\n          <button type=\"submit\">{strings.submit}</button>\n        </form>\n      </div>\n      <ToastsContainer\n        store={ToastsStore}\n        position={ToastsContainerPosition.TOP_RIGHT}\n      />\n    </main>\n  );\n};\n\nexport default AddExpenseForm;\n","import AddExpenseForm from './AddExpenseForm'\n\nexport default AddExpenseForm","import { getLocalStorage, setLocalStorage } from '../helpers/Utility'\nconst LOCAL_STORAGE_KEY = 'react_expenses'\n\nexport const getList = () => {\n  return getLocalStorage(LOCAL_STORAGE_KEY);\n}\nexport const add = (expense) => {\n  const expenses = getLocalStorage(LOCAL_STORAGE_KEY);\n\n  let updatedExpenses = expenses ? [...expenses, expense] : [expense];\n\n  setLocalStorage(LOCAL_STORAGE_KEY, updatedExpenses);\n\n  return updatedExpenses;\n}\nexport const remove = id => {\n      const expenses = getLocalStorage(LOCAL_STORAGE_KEY);\n      let updatedExpenses = expenses.filter(expense => expense.id !== id);\n\n      setLocalStorage(LOCAL_STORAGE_KEY, updatedExpenses);\n\n      return updatedExpenses;\n}\nexport const filter = () => {}","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./styles/styles.scss\";\n\nimport ExpensesContext from \"./context/ExpensesContext\";\nimport useExpenses from \"./hooks/useExpenses\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport ExpensesList from \"./components/ExpensesList\";\nimport AddExpenseForm from \"./components/AddExpenseForm\";\nimport * as api from \"./api/expenses\";\n\nfunction App() {\n  const { state, add, remove, filter, changeLang } = useExpenses(api);\n\n  return (\n    <div className=\"l-app\">\n      <ExpensesContext.Provider\n        value={{ state, add, remove, filter, changeLang }}\n      >\n        <Router>\n          <Header />\n          <Switch>\n            <Route path=\"/react-expenses\" exact component={ExpensesList} />\n            <Route\n              path=\"/react-expenses/add-expense\"\n              exact\n              component={AddExpenseForm}\n            />\n          </Switch>\n          <Footer />\n        </Router>\n      </ExpensesContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n\n// TODO: APP outline:\n\n//  1. lorem ipsum\n//  2. hello world\n//  3. hello\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}